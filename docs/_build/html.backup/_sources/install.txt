Getting Started - Install & Setup
=================================

Installing Tattle is pretty simple process. Tattle was written in Python, and was designed to work within a `virtualenv`.  The first steps for getting Tattle installed are ensuring you have Python 2.7 installed on your system, as well as `pip` and `virtualenv` as well ( typically installing python 2.7 is as easy as ``apt-get install python27 python27-virtualenv python27-pip`` )

After Python 2.7, pip and virtualenv have been installed, you will need ensure you have `git` installed ( ``apt-get install git``), or if you dont have `git` installed, you can download the zip file for Tattle from the Github page and unzip it manually to a directory of your choice.  

After you have these base applications installed, check our the :ref:`setup-tattle` section to continue.

Code
-------------------

The source code for Tattle is located on Github:  https://github.com/nickmaccarthy/Tattle

Requirements
--------------------
* Python 2.7
* Virtualenv
* Pip
* Git

.. _setup-tattle:

Setup & Install
-------------------
Lets assume we will assume will be installing Tattle to ``/opt/Tattle``, if you are installing into a different location, replace ``/opt/tattle`` with your install directory.
::
    cd /opt
    git clone https://github.com/nickmaccarthy/Tattle
    cd /opt/Tattle
    virtualenv env && source env/bin/activate
    pip install -r requirements.txt

.. note::
    ``$TATTLE_HOME`` refers to where you have installed Tattle.  In the case of this documentation we installed it in ``/opt/Tattle``

.. _configure-tattle:

Configuration
--------------

There are a few things we need to configure before we cas start using Tattle.

 
1. We need to define how to connect to our Elasticserach cluster.  To do this, simple edit ``$TATTLE_HOME/etc/tattle/elasticsearch.yaml``

.. note::
    There are example configuration files in the ``$TATTLE_HOME/examples`` directory you can use for reference.  In this case, You can use the included ``$TATTLE_HOME/examples/elasticsearch.yaml`` as guidance.

Example
::
    servers:
        - "elasticsearch.mycompany.com"
    args:
        port: 9200
        use_ssl: false
        timeout: 30

.. note::
    The above YAML reference uses the directives defined the python elasticsearch client.  The variables for the args can be found here: https://elasticsearch-py.readthedocs.io/en/master/api.html#elasticsearch

2. We need to define our email configuration, and or other alert output configurations such as pagerduty, slack, etc.  In this case will just set up our email output.  
Create a new file called ``$TATTLE_HOME/etc/tattle/email.yaml``

Example
::
        server: 'localhost'
        port: 25
        default_sender: 'tattle@localhost'
        subject_prefix: "Tattle Alert: "

3. Now we need to make `Tale`.  A `Tale` is a definition for our alert.  As Tales are specific to the type of data you need to alert on, they will require more a more in-depth explination then what we can provide in this section.   So please go check out the :doc:`tales` section on setting up a Tale, and come back to the next step once that is completed.


4. Once you have configured your Tale, please look at the :ref:`running-tattle` section below.

.. note::
    A note on yaml configuration files.  You can use use both ``.yml`` or ``.yaml`` as your file extension

.. _running-tattle:

Running
--------

1. Tattle is designed (in its current form) to run standalone.  Its best to run Tattle on a CRON job, typically with an interval of every minute.  You can run it manually yourself as well. Just run ``$TATTLE_HOME/bin/tattled.py``.  

.. note::
    There are thoughts of having Tattle run as daemon in the future. 

2. Tattle also comes with a tale/alert testing utility.  This is how you can check your Tale before you put it into 'production'.  If there are matches, tattle will run whatever is in the Tale ``action``.  Simply run ``$TATTLE_HOME/bin/test_alert.py  /path/to/the/tale.yaml``. 

.. _example-cron:

Example Cron
-------------------
Its typical for Tattle run on a CRON job, with a one minute interval.  Everytime Tattle runs, it will check all alerts/Tales.  So if you add additonal tales, Tattle should pick them on its next run

``*/1 * * * * /opt/Tattle/env/bin/python /opt/Tattle/bin/tattled.py``
